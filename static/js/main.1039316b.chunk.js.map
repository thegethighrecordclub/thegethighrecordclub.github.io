{"version":3,"sources":["Good.js","DontTouchMe.js","App.js","serviceWorker.js","index.js"],"names":["DontTouchMe","props","state","isShiny","shine","bind","this","setState","className","onMouseEnter","onMouseLeave","alt","src","i","style","WebkitMaskImage","shape","Component","goods","map","Good","key","App","$","body","template","size","clone","removeAttr","css","top","Math","random","left","webkitAnimationDelay","mozAnimationDelay","addClass","appendTo","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSA8BeA,E,YA3Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,SAAS,GACxB,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBAHI,E,qEAOjBC,KAAKC,SAAS,CACZJ,SAAUG,KAAKJ,MAAMC,Y,+BAKvB,OACE,yBAAKK,UAAU,OAAOC,aAAcH,KAAKF,MAAOM,aAAcJ,KAAKF,OACjE,yBACEI,UAAW,WACXG,IAAI,cACJC,IAAK,QAAUN,KAAKL,MAAMY,EAAI,OAC9BC,MAAO,CAAEC,gBAAiB,OAAST,KAAKL,MAAMe,MAAQ,WAExD,yBAAKR,UAAW,iBAAmBF,KAAKJ,MAAMC,SAAW,gB,GAtBvCc,aCuBXjB,E,iLArBX,IAAIkB,EAAQ,CAAC,OAAQ,QAAS,SAAU,SAQxC,OANAA,EAAQA,EAAMC,KAAI,SAACH,EAAOH,GAAR,OAChB,kBAACO,EAAD,CAAMJ,MAAOA,EAAOH,EAAGA,EAAGQ,IAAK,QAAUR,OAMzC,yBAAKL,UAAU,aACb,gCACE,oDACA,wBAAIA,UAAU,eAAd,cAEF,yBAAKA,UAAU,SAASU,Q,GAhBND,a,gBCqDXK,E,4LA/CXC,KAAE,WAqBA,IApBA,IAAIC,EAAOD,IAAE,cACXE,EAAWF,IAAE,mBAIXG,EAAO,QAeFb,EAAI,EAAGA,EAlBN,IAkBiBA,IAEvBa,EADEb,EAAI,IAAM,EACL,QACEA,EAAI,IAAM,EACZ,SAEA,QAnBTY,EACGE,QACAC,WAAW,MACXC,IAAI,CACHC,IAAqB,IAAhBC,KAAKC,SAAiB,IAC3BC,KAAsB,IAAhBF,KAAKC,SAAiB,IAC5BE,qBAVM,GAUgBH,KAAKC,SAAqB,IAChDG,kBAXM,GAWaJ,KAAKC,SAAqB,MAE9CI,SAASV,GACTW,SAASb,Q,+BAkBhB,OACE,yBAAKhB,UAAU,OACb,yBAAK8B,GAAG,aACN,yBAAK9B,UAAU,oBAEjB,kBAAC,EAAD,W,GA3CUS,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1039316b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DontTouchMe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isShiny: false };\n    this.shine = this.shine.bind(this);\n  }\n\n  shine() {\n    this.setState({\n      isShiny: !this.state.isShiny\n    })\n  }\n\n  render() {\n    return (\n      <div className='item' onMouseEnter={this.shine} onMouseLeave={this.shine}>\n        <img\n          className={'item-img'}\n          alt='cute goods!'\n          src={'/dtm-' + this.props.i + '.jpg'}\n          style={{ WebkitMaskImage: 'url(' + this.props.shape + '.svg)' }}\n        />\n        <div className={'item-overlay ' + (this.state.isShiny && 'shine')}></div>\n      </div>\n    );\n  }\n}\n\nexport default DontTouchMe;\n","import React, { Component } from 'react';\nimport Good from './Good';\nclass DontTouchMe extends Component {\n  render() {\n    let goods = ['star', 'heart', 'circle', 'heart'];\n\n    goods = goods.map((shape, i) => (\n      <Good shape={shape} i={i} key={'good-' + i} />\n    ));\n    // goods = goods.concat(goods);\n    // goods = goods.concat(goods);\n\n    return (\n      <div className='container'>\n        <header>\n          <h1>Don't Touch Me Goods</h1>\n          <h4 className='description'>DM to Buy</h4>\n        </header>\n        <div className='goods'>{goods}</div>\n      </div>\n    );\n  }\n}\n\n\nexport default DontTouchMe;\n","import React, { Component } from 'react';\nimport './App.css';\nimport DontTouchMe from './DontTouchMe';\n\nimport $ from 'jquery';\n\nclass App extends Component {\n  componentDidMount() {\n    $(function() {\n      var body = $('#starshine'),\n        template = $('.template.shine'),\n        stars = 200,\n        sparkle = 20;\n\n      var size = 'small';\n      var createStar = function() {\n        template\n          .clone()\n          .removeAttr('id')\n          .css({\n            top: Math.random() * 100 + '%',\n            left: Math.random() * 100 + '%',\n            webkitAnimationDelay: Math.random() * sparkle + 's',\n            mozAnimationDelay: Math.random() * sparkle + 's'\n          })\n          .addClass(size)\n          .appendTo(body);\n      };\n\n      for (var i = 0; i < stars; i++) {\n        if (i % 2 === 0) {\n          size = 'small';\n        } else if (i % 3 === 0) {\n          size = 'medium';\n        } else {\n          size = 'large';\n        }\n\n        createStar();\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div id='starshine'>\n          <div className='template shine'></div>\n        </div>\n        <DontTouchMe />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}